<?php

declare(strict_types=1);

namespace Afk11\Sbs1\MessageType;

class MessageTypeRegistryFactory implements MessageTypeRegistryFactoryInterface
{
    /**
     * @return MessageTypeRegistry
     * @see MessageTypeRegistryFactoryInterface::create()
     */
    public function create(): MessageTypeRegistry
    {
        return new MessageTypeRegistry(
            $this->createSelType(),
            $this->createIdType(),
            $this->createAirType(),
            $this->createStatusType(),
            $this->createClickType(),
            $this->createMsgType()
        );
    }

    public function createSelType(): MessageType
    {
        return new MessageType(MessageType::SEL, 'SELECTION CHANGE MESSAGE', 'Generated when the user changes the selected aircraft in BaseStation.');
    }

    public function createIdType(): MessageType
    {
        return new MessageType(MessageType::ID, 'NEW ID MESSAGE', 'Generated when an aircraft being tracked sets or changes its callsign.');
    }

    public function createAirType(): MessageType
    {
        return new MessageType(MessageType::AIR, 'NEW AIRCRAFT MESSAGE', 'Generated when the SBS picks up a signal for an aircraft that it isn\'t currently tracking.');
    }

    public function createStatusType(): MessageType
    {
        return new MessageType(MessageType::STA, 'STATUS CHANGE MESSAGE', 'Generated when an aircraft\'s status changes according to the timeout values in the Data Settings menu');
    }

    public function createClickType(): MessageType
    {
        return new MessageType(MessageType::CLK, 'CLICK MESSAGE', 'Generated when the user doubleclicks (or presses return) on an aircraft (i.e. to bring up the aircraft details window).');
    }

    public function createMsgType(): MessageType
    {
        return new MessageType(MessageType::MSG, 'TRANSMISSION MESSAGE', 'Generated by the aircraft. There are eight different MSG types.');
    }
}
