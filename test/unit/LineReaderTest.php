<?php

declare(strict_types=1);

namespace Afk11\Test\Sbs1;

use Afk11\Sbs1\Helper;
use Afk11\Sbs1\LineReader;
use Afk11\Sbs1\MessageType\MessageType;
use Afk11\Sbs1\MessageType\MessageTypeRegistryFactory;
use Afk11\Sbs1\TransmissionType\TransmissionType;
use Afk11\Sbs1\TransmissionType\TransmissionTypeRegistryFactory;

class LineReaderTest extends TestCase
{
    /**
     * @var LineReader
     */
    private $lineReader;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->lineReader = new LineReader(
            (new MessageTypeRegistryFactory())->create(),
            (new TransmissionTypeRegistryFactory())->create()
        );
    }

    public function testShouldAcceptNegativeOneAsFalse()
    {
        // this line requires that -1 be treated as true in when parsing a boolean value
        $line = "MSG,6,1,1,4848F2,1,2018/05/21,18:08:55.093,2018/05/21,18:08:55.136,,,,,,,,1040,-1,0,0,";
        $msg = $this->lineReader->read($line);
        $this->assertTrue($msg->isSquawkAlert());
    }

    public function testParseSELMessage()
    {
        $line = "SEL,,496,2286,4CA4E5,27215,2010/02/19,18:06:07.710,2010/02/19,18:06:07.710,RYR1427";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::SEL, $msg->getMessageType()->getId());
        $this->assertNull($msg->getTransmissionType());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(2286, $msg->getAircraftId());
        $this->assertEquals("4CA4E5", $msg->getHexIdent());
        $this->assertEquals("27215", $msg->getFlightId());
        $this->assertEquals("2010/02/19 18:06:07.710", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 18:06:07.710", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertEquals("RYR1427", $msg->getCallsign());
    }

    public function testParseIDMessage()
    {
        $line = "ID,,496,7162,405637,27928,2010/02/19,18:06:07.115,2010/02/19,18:06:07.115,EZY691A";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::ID, $msg->getMessageType()->getId());
        $this->assertNull($msg->getTransmissionType());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(7162, $msg->getAircraftId());
        $this->assertEquals("405637", $msg->getHexIdent());
        $this->assertEquals("27928", $msg->getFlightId());
        $this->assertEquals("2010/02/19 18:06:07.115", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 18:06:07.115", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertEquals("EZY691A", $msg->getCallsign());
    }

    public function testParseAIRMessage()
    {
        $line = "AIR,,496,5906,400F01,27931,2010/02/19,18:06:07.128,2010/02/19,18:06:07.128";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::AIR, $msg->getMessageType()->getId());
        $this->assertNull($msg->getTransmissionType());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(5906, $msg->getAircraftId());
        $this->assertEquals("400F01", $msg->getHexIdent());
        $this->assertEquals("27931", $msg->getFlightId());
        $this->assertEquals("2010/02/19 18:06:07.128", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 18:06:07.128", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
    }
    public function testParseSTAMessage()
    {
        $line = "STA,,5,179,400AE7,10103,2008/11/28,14:58:51.153,2008/11/28,14:58:51.153,RM";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::STA, $msg->getMessageType()->getId());
        $this->assertNull($msg->getTransmissionType());
        $this->assertEquals(5, $msg->getSessionId());
        $this->assertEquals(179, $msg->getAircraftId());
        $this->assertEquals("400AE7", $msg->getHexIdent());
        $this->assertEquals("10103", $msg->getFlightId());
        $this->assertEquals("2008/11/28 14:58:51.153", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2008/11/28 14:58:51.153", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertEquals("RM", $msg->getCallsign());
    }

    public function testParseCLKMessage()
    {
        $line = "CLK,,496,-1,,-1,2010/02/19,18:18:19.036,2010/02/19,18:18:19.036";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::CLK, $msg->getMessageType()->getId());
        $this->assertNull($msg->getTransmissionType());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals('-1', $msg->getAircraftId());
        $this->assertNull($msg->getHexIdent());
        $this->assertEquals("-1", $msg->getFlightId());
        $this->assertEquals("2010/02/19 18:18:19.036", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 18:18:19.036", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
    }

    public function testParseMsg1()
    {
        $line = "MSG,1,145,256,7404F2,11267,2008/11/28,23:48:18.611,2008/11/28,23:53:19.161,RJA1118,,,,,,,,,,,";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF17_BSD_0_8, $msg->getTransmissionType()->getValue());
        $this->assertEquals(145, $msg->getSessionId());
        $this->assertEquals(256, $msg->getAircraftId());
        $this->assertEquals("7404F2", $msg->getHexIdent());
        $this->assertEquals("11267", $msg->getFlightId());
        $this->assertEquals("2008/11/28 23:48:18.611", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2008/11/28 23:53:19.161", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertEquals("RJA1118", $msg->getCallsign());
    }

    public function testParseMsg2()
    {
        // I can't account for the last value on this test fixture...
        $line = "MSG,2,496,603,400CB6,13168,2008/10/13,12:24:32.414,2008/10/13,12:28:52.074,,,0,76.4,258.3,54.05735,-4.38826,,,,,,0";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF17_BSD_0_6, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(603, $msg->getAircraftId());
        $this->assertEquals("400CB6", $msg->getHexIdent());
        $this->assertEquals("13168", $msg->getFlightId());
        $this->assertEquals("2008/10/13 12:24:32.414", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2008/10/13 12:28:52.074", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertNull($msg->getAltitude());
        $this->assertEquals(0, $msg->getGroundSpeed());
        $this->assertEquals(76.4, $msg->getTrack());
        $this->assertEquals(258.3, $msg->getLatitude());
        $this->assertEquals(54.05735, $msg->getLongitude());
        $this->assertEquals(-4.38826, $msg->getVerticalRate());
        $this->assertNull($msg->getSquawk());
        $this->assertNull($msg->isSquawkAlert());
        $this->assertNull($msg->isEmergency());
        $this->assertNull($msg->isSPI());
        $this->assertNull($msg->isOnGround());
    }

    public function testParseMsg3()
    {
        $line = "MSG,3,496,211,4CA2D6,10057,2008/11/28,14:53:50.594,2008/11/28,14:58:51.153,,37000,,,51.45735,-1.02826,,,0,0,0,0";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF17_BSD_0_5, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(211, $msg->getAircraftId());
        $this->assertEquals("4CA2D6", $msg->getHexIdent());
        $this->assertEquals("10057", $msg->getFlightId());
        $this->assertEquals("2008/11/28 14:53:50.594", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2008/11/28 14:58:51.153", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertEquals(37000, $msg->getAltitude());
        $this->assertNull($msg->getGroundSpeed());
        $this->assertNull($msg->getTrack());
        $this->assertEquals(51.45735, $msg->getLatitude());
        $this->assertEquals(-1.02826, $msg->getLongitude());
        $this->assertNull($msg->getVerticalRate());
        $this->assertNull($msg->getSquawk());
        $this->assertFalse($msg->isSquawkAlert());
        $this->assertFalse($msg->isEmergency());
        $this->assertFalse($msg->isSPI());
        $this->assertFalse($msg->isOnGround());
    }

    public function testParseMsg4()
    {
        $line = "MSG,4,496,469,4CA767,27854,2010/02/19,17:58:13.039,2010/02/19,17:58:13.368,,,288.6,103.2,,,-832,,,,,";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF17_BSD_0_9, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(469, $msg->getAircraftId());
        $this->assertEquals("4CA767", $msg->getHexIdent());
        $this->assertEquals("27854", $msg->getFlightId());
        $this->assertEquals("2010/02/19 17:58:13.039", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 17:58:13.368", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertNull($msg->getAltitude());
        $this->assertEquals(288.6, $msg->getGroundSpeed());
        $this->assertEquals(103.2, $msg->getTrack());
        $this->assertNull($msg->getLatitude());
        $this->assertNull($msg->getLongitude());
        $this->assertEquals(-832, $msg->getVerticalRate());
        $this->assertNull($msg->getSquawk());
        $this->assertNull($msg->isSquawkAlert());
        $this->assertNull($msg->isEmergency());
        $this->assertNull($msg->isSPI());
        $this->assertNull($msg->isOnGround());
    }

    public function testParseMsg5()
    {
        $line = "MSG,5,496,329,394A65,27868,2010/02/19,17:58:12.644,2010/02/19,17:58:13.368,,10000,,,,,,,0,,0,0";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF4_DF20, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(329, $msg->getAircraftId());
        $this->assertEquals("394A65", $msg->getHexIdent());
        $this->assertEquals("27868", $msg->getFlightId());
        $this->assertEquals("2010/02/19 17:58:12.644", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 17:58:13.368", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertEquals(10000, $msg->getAltitude());
        $this->assertNull($msg->getGroundSpeed());
        $this->assertNull($msg->getTrack());
        $this->assertNull($msg->getLatitude());
        $this->assertNull($msg->getLongitude());
        $this->assertNull($msg->getVerticalRate());
        $this->assertNull($msg->getSquawk());
        $this->assertFalse($msg->isSquawkAlert());
        $this->assertNull($msg->isEmergency());
        $this->assertFalse($msg->isSPI());
        $this->assertFalse($msg->isOnGround());
    }

    public function testParseMsg6()
    {
        $line = "MSG,6,496,237,4CA215,27864,2010/02/19,17:58:12.846,2010/02/19,17:58:13.368,,33325,,,,,,0271,0,0,0,0";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF5_DF21, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(237, $msg->getAircraftId());
        $this->assertEquals("4CA215", $msg->getHexIdent());
        $this->assertEquals("27864", $msg->getFlightId());
        $this->assertEquals("2010/02/19 17:58:12.846", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 17:58:13.368", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertEquals(33325, $msg->getAltitude());
        $this->assertNull($msg->getGroundSpeed());
        $this->assertNull($msg->getTrack());
        $this->assertNull($msg->getLatitude());
        $this->assertNull($msg->getLongitude());
        $this->assertNull($msg->getVerticalRate());
        $this->assertEquals(271, $msg->getSquawk());
        $this->assertFalse($msg->isSquawkAlert());
        $this->assertFalse($msg->isEmergency());
        $this->assertFalse($msg->isSPI());
        $this->assertFalse($msg->isOnGround());
    }

    public function testParseMsg7()
    {
        $line = "MSG,7,496,742,51106E,27929,2011/03/06,07:57:36.523,2011/03/06,07:57:37.054,,3775,,,,,,,,,,0";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF16, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(742, $msg->getAircraftId());
        $this->assertEquals("51106E", $msg->getHexIdent());
        $this->assertEquals("27929", $msg->getFlightId());
        $this->assertEquals("2011/03/06 07:57:36.523", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2011/03/06 07:57:37.054", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertEquals(3775, $msg->getAltitude());
        $this->assertNull($msg->getGroundSpeed());
        $this->assertNull($msg->getTrack());
        $this->assertNull($msg->getLatitude());
        $this->assertNull($msg->getLongitude());
        $this->assertNull($msg->getVerticalRate());
        $this->assertNull($msg->getSquawk());
        $this->assertNull($msg->isSquawkAlert());
        $this->assertNull($msg->isEmergency());
        $this->assertNull($msg->isSPI());
        $this->assertFalse($msg->isOnGround());
    }

    public function testParseMsg8()
    {
        $line = "MSG,8,496,194,405F4E,27884,2010/02/19,17:58:13.244,2010/02/19,17:58:13.368,,,,,,,,,,,,0";
        $msg = $this->lineReader->read($line);
        $this->assertEquals(MessageType::MSG, $msg->getMessageType()->getId());
        $this->assertEquals(TransmissionType::DF11, $msg->getTransmissionType()->getValue());
        $this->assertEquals(496, $msg->getSessionId());
        $this->assertEquals(194, $msg->getAircraftId());
        $this->assertEquals("405F4E", $msg->getHexIdent());
        $this->assertEquals("27884", $msg->getFlightId());
        $this->assertEquals("2010/02/19 17:58:13.244", Helper::formatDate($msg->getGenerationTime()) . " " . Helper::formatTime($msg->getGenerationTime()));
        $this->assertEquals("2010/02/19 17:58:13.368", Helper::formatDate($msg->getRecordTime()) . " " . Helper::formatTime($msg->getRecordTime()));
        $this->assertNull($msg->getCallsign());
        $this->assertNull($msg->getAltitude());
        $this->assertNull($msg->getGroundSpeed());
        $this->assertNull($msg->getTrack());
        $this->assertNull($msg->getLatitude());
        $this->assertNull($msg->getLongitude());
        $this->assertNull($msg->getVerticalRate());
        $this->assertNull($msg->getSquawk());
        $this->assertNull($msg->isSquawkAlert());
        $this->assertNull($msg->isEmergency());
        $this->assertNull($msg->isSPI());
        $this->assertFalse($msg->isOnGround());
    }
}
